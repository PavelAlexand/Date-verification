import os
import logging
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Update

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# --- –¢–æ–∫–µ–Ω –∏ Webhook ---
API_TOKEN = os.getenv("TELEGRAM_TOKEN")  # —Ç–µ–ø–µ—Ä—å TELEGRAM_TOKEN
if not API_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

WEBHOOK_PATH = "/telegram/webhook"
WEBHOOK_URL = f"https://date-verification.onrender.com{WEBHOOK_PATH}"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# --- FastAPI ---
app = FastAPI()


# --- –°–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ ---
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


# --- –°–æ–±—ã—Ç–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è ---
@app.on_event("shutdown")
async def on_shutdown():
    session = await bot.get_session()
    await session.close()
    logger.info("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# --- Webhook endpoint ---
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: {e}")
    return {"ok": True}


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message()
async def echo_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç, –∏ —è —É–∂–µ —Ä–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ webhook üöÄ")
