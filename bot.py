import os
import logging
import re
import base64
import datetime
import httpx

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://date-verification.onrender.com/telegram/webhook")
YANDEX_API_KEY = os.getenv("YANDEX_OCR_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# ---------------- OCR ----------------
async def process_ocr(image_url: str) -> str | None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ Yandex OCR –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    async with httpx.AsyncClient() as client:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ Telegram
        resp = await client.get(image_url)
        if resp.status_code != 200:
            return None

        img_data = base64.b64encode(resp.content).decode("utf-8")

        body = {
            "folderId": YANDEX_FOLDER_ID,
            "analyze_specs": [
                {
                    "content": img_data,
                    "features": [
                        {
                            "type": "TEXT_DETECTION",
                            "text_detection_config": {
                                "languageCodes": ["ru", "en"]
                            }
                        }
                    ]
                }
            ]
        }

        headers = {
            "Authorization": f"Api-Key {YANDEX_API_KEY}"
        }

        ocr_resp = await client.post(
            "https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze",
            headers=headers,
            json=body
        )

        if ocr_resp.status_code != 200:
            logger.error(f"OCR error: {ocr_resp.text}")
            return None

        data = ocr_resp.json()

        texts = []
        try:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: textDetection –∏–ª–∏ textAnnotation
            annotation = data["results"][0]["results"][0].get("textDetection") or                          data["results"][0]["results"][0].get("textAnnotation")

            if not annotation:
                logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ textDetection/textAnnotation –≤ –æ—Ç–≤–µ—Ç–µ: {data}")
                return None

            for page in annotation["pages"]:
                for block in page["blocks"]:
                    for line in block["lines"]:
                        line_text = " ".join([word["text"] for word in line["words"]])
                        texts.append(line_text)

            return " ".join(texts)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ OCR –æ—Ç–≤–µ—Ç–∞: {e}, –æ—Ç–≤–µ—Ç: {data}")
            return None

# ---------------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------------
@dp.message(F.text)
async def echo_handler(message: Message):
    await message.answer(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {message.text}")


@dp.message(F.photo)
async def handle_photo(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ OCR –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
        file = await bot.get_file(message.photo[-1].file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file.file_path}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OCR
        text = await process_ocr(file_url)

        if not text:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ")
            return

        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        await message.answer(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}")

        # –ò—â–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.01.2025
        match = re.search(r"\d{2}\.\d{2}\.\d{4}", text)
        if not match:
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ")
            return

        date_str = match.group()
        prod_date = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
        today = datetime.date.today()

        if prod_date == today:
            await message.answer(f"‚úÖ –î–∞—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ({date_str})")
        elif prod_date < today:
            await message.answer(f"‚ö†Ô∏è –î–∞—Ç–∞ –Ω–∞ –±–∞–Ω–∫–µ ({date_str}) —É—Å—Ç–∞—Ä–µ–ª–∞. –°–µ–≥–æ–¥–Ω—è: {today}")
        else:
            await message.answer(f"‚ÑπÔ∏è –î–∞—Ç–∞ –Ω–∞ –±–∞–Ω–∫–µ ({date_str}) –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞. –°–µ–≥–æ–¥–Ω—è: {today}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")

# ---------------- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ----------------
async def on_startup(app: web.Application):
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    await bot.delete_webhook()
    await bot.session.close()
    logger.info("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/telegram/webhook")
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    return app

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π app –¥–ª—è Render
app = main()

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
