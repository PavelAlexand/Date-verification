import os
import logging
import base64
import httpx
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# üîπ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_OCR_API_KEY = os.getenv("YANDEX_OCR_API_KEY")
FOLDER_ID = os.getenv("FOLDER_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not YANDEX_OCR_API_KEY:
    raise ValueError("‚ùå YANDEX_OCR_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not FOLDER_ID:
    raise ValueError("‚ùå FOLDER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not WEBHOOK_URL:
    raise ValueError("‚ùå WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# üîπ Telegram bot
bot = Bot(token=TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# üîπ FastAPI app
app = FastAPI()

@app.on_event("startup")
async def on_startup():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–≤–æ—Å—Ç–∞
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

@app.on_event("shutdown")
async def on_shutdown():
    session = await bot.get_session()
    await session.close()

@app.get("/")
async def root():
    return {"status": "ok", "message": "Bot is running üöÄ"}

@app.head("/")
async def root_head():
    return {}

# üîπ OCR —á–µ—Ä–µ–∑ Yandex Vision API
async def yandex_ocr(image_bytes: bytes) -> str:
    url = "https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze"
    headers = {"Authorization": f"Api-Key {YANDEX_OCR_API_KEY}"}
    data = {
        "folderId": FOLDER_ID,
        "analyze_specs": [
            {
                "content": base64.b64encode(image_bytes).decode("utf-8"),
                "features": [{"type": "TEXT_DETECTION"}],
            }
        ],
    }

    async with httpx.AsyncClient(timeout=30) as client:
        response = await client.post(url, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()

    try:
        text = result["results"][0]["results"][0]["textDetection"]["pages"][0]["blocks"][0]["lines"][0]["words"][0]["text"]
        return text
    except Exception:
        return "–î–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=["photo"])
async def photo_handler(message: types.Message):
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file.file_path}"

    async with httpx.AsyncClient(timeout=30) as client:
        file_response = await client.get(file_url)
        file_response.raise_for_status()
        image_bytes = file_response.content

    text = await yandex_ocr(image_bytes)
    await message.reply(f"üìÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

# üîπ Webhook endpoint
@app.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.process_update(update)
    return {"ok": True}
