import os
import logging
import httpx
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.types import Update
from aiogram.utils.executor import start_webhook

# =============================
# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =============================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# =============================
# üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =============================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_OCR_API_KEY = os.getenv("YANDEX_OCR_API_KEY")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if not YANDEX_OCR_API_KEY:
    raise ValueError("‚ùå YANDEX_OCR_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# =============================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ webhook
# =============================
WEBHOOK_PATH = "/telegram/webhook"
WEBHOOK_URL = f"https://date-verification.onrender.com{WEBHOOK_PATH}"

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# =============================
# üîß FastAPI
# =============================
app = FastAPI()

# =============================
# üì∑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
# =============================
import base64

@dp.message_handler(content_types=["photo"])
async def photo_handler(message: types.Message):
    try:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_path = file.file_path

        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        async with httpx.AsyncClient() as client:
            img_bytes = (await client.get(file_url)).content
            img_base64 = base64.b64encode(img_bytes).decode("utf-8")

            response = await client.post(
                "https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze",
                headers={
                    "Authorization": f"Api-Key {YANDEX_OCR_API_KEY}",
                },
                json={
                    "folderId": os.getenv("YANDEX_FOLDER_ID"),
                    "analyze_specs": [{
                        "content": img_base64,
                        "features": [{"type": "TEXT_DETECTION"}]
                    }]
                }
            )

        result = response.json()
        logger.info(f"Yandex OCR response: {result}")

        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        text_blocks = []
        try:
            for page in result["results"][0]["results"][0]["textDetection"]["pages"]:
                for block in page["blocks"]:
                    for line in block["lines"]:
                        line_text = " ".join([w["text"] for w in line["words"]])
                        text_blocks.append(line_text)
            text = "\n".join(text_blocks) if text_blocks else "‚ùå –î–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"
        except Exception:
            text = "‚ùå –î–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"

        await bot.send_message(message.chat.id, f"üìÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


# =============================
# üîß Webhook endpoint
# =============================
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    update = Update(**await request.json())
    await dp.process_update(update)
    return {"ok": True}


# =============================
# üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
# =============================
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


@app.on_event("shutdown")
async def on_shutdown():
    session = await bot.get_session()
    await session.close()
