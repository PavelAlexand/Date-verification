import os
import logging
import base64
import httpx
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.types import Update

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# üîπ –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_OCR_API_KEY = os.getenv("YANDEX_OCR_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not YANDEX_OCR_API_KEY:
    raise ValueError("‚ùå YANDEX_OCR_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not YANDEX_FOLDER_ID:
    raise ValueError("‚ùå YANDEX_FOLDER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# üîπ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()


# ‚úÖ Root endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.get("/")
async def root():
    return {"status": "ok", "message": "üöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"}


# ‚úÖ –Ø–Ω–¥–µ–∫—Å Vision OCR
async def yandex_ocr(image_bytes: bytes) -> str:
    url = "https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze"
    headers = {
        "Authorization": f"Api-Key {YANDEX_OCR_API_KEY}",
        "Content-Type": "application/json",
    }

    data = {
        "folderId": YANDEX_FOLDER_ID,
        "analyze_specs": [
            {
                "content": base64.b64encode(image_bytes).decode("utf-8"),
                "features": [{"type": "TEXT_DETECTION"}],
            }
        ],
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(url, headers=headers, json=data)

    if response.status_code != 200:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Yandex API: {response.status_code} {response.text}")
        return "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"

    result = response.json()
    try:
        text = result["results"][0]["results"][0]["textDetection"]["pages"][0]["blocks"][0]["lines"][0]["words"][0]["text"]
    except Exception:
        text = "–î–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"

    return text


# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=["photo"])
async def photo_handler(message: types.Message):
    await bot.set_current(bot)  # —Ñ–∏–∫—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    try:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_path = file.file_path

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
        async with httpx.AsyncClient() as client:
            file_bytes = await client.get(
                f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"
            )
        text = await yandex_ocr(file_bytes.content)
        await message.reply(f"üìÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")


# ‚úÖ –í–µ–±—Ö—É–∫ –æ—Ç Telegram
@app.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    update = Update(**await request.json())
    await dp.process_update(update)
    return {"ok": True}


# ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@app.on_event("startup")
async def on_startup():
    webhook_url = "https://date-verification.onrender.com/telegram/webhook"
    await bot.set_webhook(webhook_url)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")


# ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
@app.on_event("shutdown")
async def on_shutdown():
    session = await bot.get_session()
    await session.close()
