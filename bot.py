import os
import base64
import logging
import httpx
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.types import Update

# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not YANDEX_API_KEY:
    raise ValueError("‚ùå YANDEX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

app = FastAPI()


# ================== –Ø–Ω–¥–µ–∫—Å OCR ==================
async def yandex_ocr(image_bytes: bytes) -> str:
    url = "https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze"
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
    }
    data = {
        "analyze_specs": [{
            "content": base64.b64encode(image_bytes).decode("utf-8"),
            "features": [{
                "type": "TEXT_DETECTION",
                "text_detection_config": {"language_codes": ["*"]}
            }]
        }]
    }

    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.post(url, headers=headers, json=data)
        r.raise_for_status()
        result = r.json()

    # üîπ –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ø–Ω–¥–µ–∫—Å–∞
    logging.info(f"üìÑ Yandex OCR raw response: {result}")

    # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç
    text_blocks = []
    try:
        for res in result["results"][0]["results"][0]["textDetection"]["pages"][0]["blocks"]:
            for line in res.get("lines", []):
                text_blocks.append(line.get("text", ""))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ OCR –æ—Ç–≤–µ—Ç–∞: {e}")

    full_text = "\n".join(text_blocks)
    logging.info(f"üìÑ Extracted text: {full_text}")

    return full_text or "–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"


# ================== –•—ç–Ω–¥–ª–µ—Ä—ã ==================
@dp.message_handler(content_types=["photo"])
async def photo_handler(message: types.Message):
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file.file_path}"

    async with httpx.AsyncClient() as client:
        resp = await client.get(file_url)
        img_bytes = resp.content

    text = await yandex_ocr(img_bytes)

    # –õ–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    logging.info(f"üì© Final recognized text: {text}")
    await message.reply(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}")


@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –ø–æ–ø—Ä–æ–±—É—é —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞ –Ω–µ–º –¥–∞—Ç—É.")


# ================== Webhook ==================
@app.on_event("startup")
async def on_startup():
    webhook_url = os.getenv("WEBHOOK_URL")
    if webhook_url:
        await bot.set_webhook(f"{webhook_url}/telegram/webhook")
        logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}/telegram/webhook")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()


@app.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update(**data)
        await dp.process_update(update)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
    return {"ok": True}


@app.get("/")
async def root():
    return {"status": "ok", "message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"}
