import os
import io
import base64
import logging
import httpx
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.types import Update

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîπ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render ‚Üí Environment Variables)
BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –≤—Å—ë –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
if not BOT_TOKEN or not YANDEX_API_KEY or not YANDEX_FOLDER_ID:
    raise RuntimeError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN, YANDEX_API_KEY –∏–ª–∏ YANDEX_FOLDER_ID")

# üîπ Telegram bot
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# üîπ FastAPI –¥–ª—è Webhook
app = FastAPI()


# ---- OCR —á–µ—Ä–µ–∑ Yandex Vision API ----
async def yandex_ocr(image_bytes: bytes) -> str:
    url = "https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze"

    headers = {"Authorization": f"Api-Key {YANDEX_API_KEY}"}

    body = {
        "folderId": YANDEX_FOLDER_ID,
        "analyze_specs": [{
            "content": base64.b64encode(image_bytes).decode("utf-8"),
            "features": [{"type": "TEXT_DETECTION"}]
        }]
    }

    async with httpx.AsyncClient(timeout=30.0) as client:
        r = await client.post(url, headers=headers, json=body)
        r.raise_for_status()
        result = r.json()

    # –î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç
    try:
        text = result["results"][0]["results"][0]["textDetection"]["pages"][0]["blocks"][0]["lines"][0]["text"]
    except Exception:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç"
    return text


# ---- –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —Ñ–æ—Ç–æ ----
@dp.message_handler(content_types=["photo"])
async def photo_handler(message: types.Message):
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    bio = io.BytesIO()
    await photo.download(destination=bio)
    text = await yandex_ocr(bio.getvalue())
    await message.reply(f"üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text}")


# ---- Webhook ----
@app.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update(**data)
    await dp.process_update(update)
    return {"ok": True}


@app.on_event("startup")
async def on_startup():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_url = os.getenv("RENDER_EXTERNAL_URL") + "/telegram/webhook"
    await bot.set_webhook(webhook_url)
    logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()
