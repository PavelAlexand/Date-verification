import os
import logging
import httpx
from io import BytesIO
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.types import Update

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_OCR_API_KEY = os.getenv("YANDEX_OCR_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not YANDEX_OCR_API_KEY:
    raise ValueError("‚ùå YANDEX_OCR_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not YANDEX_FOLDER_ID:
    raise ValueError("‚ùå YANDEX_FOLDER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

app = FastAPI()

YANDEX_VISION_URL = "https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze"


async def recognize_text(image_bytes: bytes) -> str:
    headers = {
        "Authorization": f"Api-Key {YANDEX_OCR_API_KEY}",
        "Content-Type": "application/json",
    }
    data = {
        "folderId": YANDEX_FOLDER_ID,
        "analyze_specs": [{
            "content": image_bytes.decode("latin1"),
            "features": [{"type": "TEXT_DETECTION", "text_detection_config": {"language_codes": ["*"]}}],
        }]
    }

    async with httpx.AsyncClient(timeout=30.0) as client:
        response = await client.post(YANDEX_VISION_URL, headers=headers, json=data)

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ø–Ω–¥–µ–∫—Å–∞
    logger.info(f"üì© Yandex Vision raw response: {response.text}")

    if response.status_code != 200:
        return f"–û—à–∏–±–∫–∞ Vision API: {response.text}"

    try:
        result = response.json()
        text = result["results"][0]["results"][0]["textDetection"]["pages"][0]["blocks"][0]["lines"][0]["text"]
        return text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Vision API: {e}")
        return "–î–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"


@dp.message_handler(content_types=["photo"])
async def photo_handler(message: types.Message):
    try:
        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ
        photo = message.photo[-1]

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ bot
        file_info = await bot.get_file(photo.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"

        async with httpx.AsyncClient() as client:
            response = await client.get(file_url)
            image_bytes = response.content

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OCR
        text = await recognize_text(image_bytes)

        await bot.send_message(message.chat.id, f"üìÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        await bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


@app.on_event("startup")
async def on_startup():
    webhook_url = "https://date-verification.onrender.com/telegram/webhook"
    await bot.set_webhook(webhook_url)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()
    logger.info("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
