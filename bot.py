import os
import logging
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Update

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://date-verification.onrender.com/telegram/webhook")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# === FastAPI ===
app = FastAPI()

# Health-check (—á—Ç–æ–±—ã Render –Ω–µ –ø–∞–¥–∞–ª –Ω–∞ / –∏ /HEAD)
@app.get("/")
async def root():
    return {"status": "ok", "message": "ü§ñ Bot is running"}

@app.head("/")
async def root_head():
    return {"status": "ok"}


# === Webhook ===
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

@app.on_event("shutdown")
async def on_shutdown():
    logger.info("‚ôªÔ∏è –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
    if not bot.session.closed:   # aiogram 3.x ‚Äî session –Ω–∞–¥–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é
        await bot.session.close()


@app.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.model_validate(data)  # aiogram 3.x
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return {"ok": False}


# === Handlers ===
@dp.message()
async def handle_message(message: types.Message):
    if message.text:
        await message.answer(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: <b>{message.text}</b>")
    else:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")


@dp.message(content_types=["photo"])
async def handle_photo(message: types.Message):
    try:
        await message.answer("üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ (OCR –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á—ë–Ω)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")
